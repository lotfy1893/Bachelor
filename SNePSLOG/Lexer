import java_cup.runtime.Symbol;






%%
%class Lexer

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
	return new Symbol(sym.EOF, null);
%eofval}




DIGIT=[0-9]	




NUMBER=({DIGIT})+([.]({DIGIT})+)?
ALPHA=[a-zA-z]
ALPHA_NUMERIC={ALPHA}|{DIGIT}



	
WFF=wff 
ACTIVATE=activate
WITHSOME=withsome
WITHALL=withall

ADJUST=reduce|expand|none
ACTIVATEASSERT=activate!
ADDTOCONTEXT=add-to-context
ASK=ask
ASKIFNOT=askifnot
ASKWH=askwh
ASKWHNOT=askwhnot

CONVERSE=converse
COMPOSE=compose
KSTAR=kstar
KPLUS=kplus
IRREFLIXIVERESTRICT=irreflexive-restrict
DOMAINRESTRICT=domain-restrict

BELIFESABOUT=beliefs-about
AFTERBR=auto|manual

BRMODE=br-mode
BRCMD={BRMODE}({AFTERBR})?

BRTIEMODE=br-tie-mode
BRTIECMD={BRTIEMODE}({AFTERBR})?

CLEARINFER=clear-infer
CLEARKB=clearkb
COPYRIGHT=copyright

DEFINERELATION=define-relation
DEFINEFRAME=define-frame
DEFINEPATH=define-path
DEMO=demo
DESCRIBECONTEXT=describe-context
DESCRIBETERMS=describe-terms

EXPERT=expert

LISP=lisp
LISTASSERTEDWFFS=list-asserted-wffs
LISTCONTEXTS=list-contexts
LISTTERMS=list-terms
LISTWFFS=list-wffs
LOAD=load

INFERENCE=inference 
ACTING=acting
TRANSLATION=translation
PARSING=parsing


NORMAL=normal

PERFORM=perform

REMOVEFROMCONTEXT=remove-from-context

SETCONTEXT=set-context
SETDEFAULTCONTEXT=set-default-context

SETMODE1=set-mode-1
SETMODE2=set-mode-2
SETMODE3=set-mode-3

SETORDERH=explicit|fluent|null-order|source
SETORDER=set-order
SETORDERCMD={SETORDER}({SETORDERH})?

SHOW=show
TRACE=trace
UNDEFINEPATH=undefine-path
UNLABELED=unlabeled
UNTRACE=untrace

AND=and
OR=or
NAND=nand
NOR=nor
XOR=xor
IFF=iff


ANDOR=andor
THRESH=thresh
ALL=all
NEXISTS=nexists

IDENTIFIER=({ALPHA})+
WHITE_SPACE=([\ \n\r\t\f\b])+

%%

<YYINITIAL> {WHITE_SPACE} { }
<YYINITIAL> {WFF} { 
	return new Symbol(sym.WF, yytext());
}
<YYINITIAL> {AND} { 
	return new Symbol(sym.AND, yytext());
}
<YYINITIAL> {OR} { 
	return new Symbol(sym.OR, yytext());
}
<YYINITIAL> "<=>" { 
	return new Symbol(sym.DOUBLEIMPLICATION, yytext());
}
<YYINITIAL> "~" { 
	return new Symbol(sym.NOT, yytext());
}
<YYINITIAL> {INFERENCE} { 
	return new Symbol(sym.INFERENCE, yytext());
}
<YYINITIAL> {ADJUST} { 
	return new Symbol(sym.ADJUST, yytext());
}
<YYINITIAL> {CONVERSE} { 
	return new Symbol(sym.CONVERSE, yytext());
}
<YYINITIAL> {COMPOSE} { 
	return new Symbol(sym.COMPOSE, yytext());
}
<YYINITIAL> {KSTAR} { 
	return new Symbol(sym.KSTAR, yytext());
}
<YYINITIAL> {KPLUS} { 
	return new Symbol(sym.KPLUS, yytext());
}
<YYINITIAL> {IRREFLIXIVERESTRICT} { 
	return new Symbol(sym.IRR, yytext());
}
<YYINITIAL> {DOMAINRESTRICT} { 
	return new Symbol(sym.DOMAINRESTRICT, yytext());
}
<YYINITIAL> {ACTING} { 
	return new Symbol(sym.ACTING, yytext());
}
<YYINITIAL> {TRANSLATION} { 
	return new Symbol(sym.TRANSLATION, yytext());
}
<YYINITIAL> {PARSING} { 
	return new Symbol(sym.PARSING, yytext());
}
<YYINITIAL> {ANDOR} { 
	return new Symbol(sym.ANDOR, yytext());
}
<YYINITIAL> {THRESH} { 
	return new Symbol(sym.THRESH, yytext());
}
<YYINITIAL> {NEXISTS} { 
	return new Symbol(sym.NEXISTS, yytext());
}
<YYINITIAL> {ALL} { 
	return new Symbol(sym.ALL, yytext());
}
<YYINITIAL> {ACTIVATE} { 
	return new Symbol(sym.ACTIVATE, yytext());
}
<YYINITIAL> {ACTIVATEASSERT} { 
	return new Symbol(sym.ACTIVATEASSERT, yytext());
}
<YYINITIAL> {ADDTOCONTEXT} { 
	return new Symbol(sym.ADDTOCONTEXT, yytext());
}
<YYINITIAL> {ASK} { 
	return new Symbol(sym.ASK, yytext());
}
<YYINITIAL> {ASKIFNOT} { 
	return new Symbol(sym.ASKIFNOT, yytext());
}
<YYINITIAL> {ASKWH} { 
	return new Symbol(sym.ASKWH, yytext());
}
<YYINITIAL> {ASKWHNOT} { 
	return new Symbol(sym.ASKWHNOT, yytext());
}
<YYINITIAL> {CLEARINFER} { 
	return new Symbol(sym.CLEARINFER, yytext());
}
<YYINITIAL> {CLEARKB} { 
	return new Symbol(sym.CLEARKB, yytext());
}
<YYINITIAL> {DEFINEFRAME} { 
	return new Symbol(sym.DEFINEFRAME, yytext());
}
<YYINITIAL> {DEFINEPATH} { 
	return new Symbol(sym.DEFINEPATH, yytext());
}
<YYINITIAL> {DEMO} { 
	return new Symbol(sym.DEMO, yytext());
}
<YYINITIAL> {DESCRIBECONTEXT} { 
	return new Symbol(sym.DESCRIBECONTEXT, yytext());
}
<YYINITIAL> {DESCRIBETERMS} { 
	return new Symbol(sym.DESCRIBETERMS, yytext());
}
<YYINITIAL> {EXPERT} { 
	return new Symbol(sym.EXPERT, yytext());
}
<YYINITIAL> {LISP} { 
	return new Symbol(sym.LISP, yytext());
}
<YYINITIAL> {LISTASSERTEDWFFS} { 
	return new Symbol(sym.LISTASSERTEDWFFS, yytext());
}
<YYINITIAL> {LISTCONTEXTS} { 
	return new Symbol(sym.LISTCONTEXTS, yytext());
}
<YYINITIAL> {LISTTERMS} { 
	return new Symbol(sym.LISTTERMS, yytext());
}
<YYINITIAL> {LISTWFFS} { 
	return new Symbol(sym.LISTWFFS, yytext());
}
<YYINITIAL> {LOAD} { 
	return new Symbol(sym.LOAD, yytext());
}
<YYINITIAL> {NORMAL} { 
	return new Symbol(sym.NORMAL, yytext());
}
<YYINITIAL> {PERFORM} { 
	return new Symbol(sym.PERFORM, yytext());
}
<YYINITIAL> {REMOVEFROMCONTEXT} { 
	return new Symbol(sym.REMOVEFROMCONTEXT, yytext());
}
<YYINITIAL> {SETCONTEXT} { 
	return new Symbol(sym.SETCONTEXT, yytext());
}
<YYINITIAL> {SETDEFAULTCONTEXT} { 
	return new Symbol(sym.SETDEFAULTCONTEXT, yytext());
}
<YYINITIAL> {SETMODE1} { 
	return new Symbol(sym.SETMODE1, yytext());
}
<YYINITIAL> {SETMODE2} { 
	return new Symbol(sym.SETMODE2, yytext());
}
<YYINITIAL> {SETMODE3} { 
	return new Symbol(sym.SETMODE3, yytext());
}
<YYINITIAL> {SHOW} { 
	return new Symbol(sym.SHOW, yytext());
}
<YYINITIAL> {TRACE} { 
	return new Symbol(sym.TRACE, yytext());
}
<YYINITIAL> {UNDEFINEPATH} { 
	return new Symbol(sym.UNDEFINEPATH, yytext());
}
<YYINITIAL> {UNLABELED} { 
	return new Symbol(sym.UNLABELED, yytext());
}
<YYINITIAL> {UNTRACE} { 
	return new Symbol(sym.UNTRACE, yytext());
}
<YYINITIAL> {NUMBER} { 
	return new Symbol(sym.NM, ""+Integer.parseInt(yytext()));
}
<YYINITIAL> {WITHSOME} { 
	return new Symbol(sym.WITHSOME, yytext());
}
<YYINITIAL> {WITHALL} { 
	return new Symbol(sym.WITHALL, yytext());
}
<YYINITIAL> {IDENTIFIER} { 
	return new Symbol(sym.ID, yytext());
}
<YYINITIAL> "?" { 
	return new Symbol(sym.QM, yytext());
}
<YYINITIAL> "-" { 
	return new Symbol(sym.DASH, yytext());
}
<YYINITIAL> "," { 
	return new Symbol(sym.COMA, yytext());
}
<YYINITIAL> "." { 
	return new Symbol(sym.DT, yytext());
}
<YYINITIAL> "=>" { 
	return new Symbol(sym.ARROW, yytext());
}
<YYINITIAL> "&=>" { 
	return new Symbol(sym.ANDENTAIL, yytext());
}
<YYINITIAL> "v=>" { 
	return new Symbol(sym.ORENTAIL, yytext());
}
<YYINITIAL> {NUMBER}"=>" { 
	return new Symbol(sym.II, yytext());
}
<YYINITIAL> "{" { 
	return new Symbol(sym.RCURLY, yytext());
}
<YYINITIAL> "}" { 
	return new Symbol(sym.LCURLY, yytext());
}
<YYINITIAL> {DIGIT}+"=>" { 
	return new Symbol(sym.NE, yytext());
}
<YYINITIAL> ":" { 
	return new Symbol(sym.CL, yytext());
}
<YYINITIAL> "(" { 
	return new Symbol(sym.LP, yytext());
}
<YYINITIAL> ")" { 
	return new Symbol(sym.RP, yytext());
}	
<YYINITIAL> "!" { 
	return new Symbol(sym.EM, yytext());
}

<YYINITIAL> . {
	return new Symbol(sym.error, "Error!");
}

