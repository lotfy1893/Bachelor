package SnepsLog;

//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 16 17:04:55 EET 2015
//----------------------------------------------------

import java_cup.runtime.*;

/**
 * CUP v0.11a beta 20060608 generated parser.
 * 
 * @version Thu Apr 16 17:04:55 EET 2015
 */
public class parser extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public parser() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public parser(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Constructor which sets the default scanner. */
	public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\145\000\002\033\005\000\002\002\004\000\002\033"
			+ "\005\000\002\033\006\000\002\033\005\000\002\033\005"
			+ "\000\002\033\005\000\002\033\005\000\002\033\004\000"
			+ "\002\033\004\000\002\033\007\000\002\033\005\000\002"
			+ "\033\005\000\002\033\004\000\002\033\004\000\002\033"
			+ "\005\000\002\033\004\000\002\033\005\000\002\033\004"
			+ "\000\002\033\004\000\002\033\004\000\002\033\005\000"
			+ "\002\041\003\000\002\041\002\000\002\043\003\000\002"
			+ "\043\002\000\002\044\006\000\002\051\003\000\002\051"
			+ "\006\000\002\046\005\000\002\050\003\000\002\050\002"
			+ "\000\002\047\003\000\002\047\002\000\002\034\003\000"
			+ "\002\034\002\000\002\042\003\000\002\042\002\000\002"
			+ "\040\003\000\002\040\002\000\002\032\003\000\002\032"
			+ "\003\000\002\032\003\000\002\032\003\000\002\023\003"
			+ "\000\002\023\003\000\002\023\003\000\002\026\005\000"
			+ "\002\026\005\000\002\025\003\000\002\025\003\000\002"
			+ "\025\003\000\002\003\005\000\002\003\005\000\002\003"
			+ "\005\000\002\003\005\000\002\012\003\000\002\012\005"
			+ "\000\002\014\003\000\002\014\004\000\002\013\003\000"
			+ "\002\013\003\000\002\013\003\000\002\013\003\000\002"
			+ "\013\003\000\002\013\003\000\002\027\011\000\002\015"
			+ "\004\000\002\016\011\000\002\020\011\000\002\020\007"
			+ "\000\002\017\014\000\002\024\011\000\002\024\005\000"
			+ "\002\024\007\000\002\021\004\000\002\021\004\000\002"
			+ "\021\003\000\002\021\003\000\002\021\005\000\002\031"
			+ "\005\000\002\010\012\000\002\010\013\000\002\011\012"
			+ "\000\002\011\013\000\002\022\004\000\002\022\002\000"
			+ "\002\030\004\000\002\007\004\000\002\002\003\000\002"
			+ "\002\002\000\002\037\006\000\002\036\003\000\002\036"
			+ "\002\000\002\035\003\000\002\045\003\000\002\006\004"
			+ "\000\002\005\004\000\002\004\003\000\002\004\003\000"
			+ "\002\004\003" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\301\000\054\042\022\043\031\044\010\045\021\046"
			+ "\030\047\005\050\025\051\027\052\006\053\007\056\024"
			+ "\057\004\060\013\061\012\062\017\063\026\064\023\065"
			+ "\015\067\016\070\020\071\011\001\002\000\034\002\uffe8"
			+ "\005\062\006\036\013\uffe8\016\034\017\057\020\050\022"
			+ "\042\031\041\032\053\033\035\034\061\035\037\001\002"
			+ "\000\030\005\062\006\036\016\034\017\057\020\050\022"
			+ "\042\031\041\032\053\033\035\034\061\035\037\001\002"
			+ "\000\006\002\uffde\013\230\001\002\000\004\016\034\001"
			+ "\002\000\004\016\034\001\002\000\004\016\034\001\002"
			+ "\000\006\002\uffde\013\230\001\002\000\006\002\uffde\013"
			+ "\230\001\002\000\004\002\253\001\002\000\006\002\uffde"
			+ "\013\230\001\002\000\006\002\uffde\013\230\001\002\000"
			+ "\010\002\uffea\013\uffea\016\034\001\002\000\014\005\062"
			+ "\006\036\016\034\017\057\020\050\001\002\000\030\005"
			+ "\062\006\036\016\034\017\057\020\050\022\042\031\041"
			+ "\032\053\033\035\034\061\035\037\001\002\000\030\005"
			+ "\062\006\036\016\034\017\057\020\050\022\042\031\041"
			+ "\032\053\033\035\034\061\035\037\001\002\000\034\002"
			+ "\uffe8\005\062\006\036\013\uffe8\016\034\017\057\020\050"
			+ "\022\042\031\041\032\053\033\035\034\061\035\037\001"
			+ "\002\000\010\002\uffea\013\uffea\016\034\001\002\000\030"
			+ "\005\062\006\036\016\034\017\057\020\050\022\042\031"
			+ "\041\032\053\033\035\034\061\035\037\001\002\000\006"
			+ "\002\uffde\013\230\001\002\000\006\002\uffde\013\230\001"
			+ "\002\000\030\005\062\006\036\016\034\017\057\020\050"
			+ "\022\042\031\041\032\053\033\035\034\061\035\037\001"
			+ "\002\000\030\005\062\006\036\016\034\017\057\020\050"
			+ "\022\042\031\041\032\053\033\035\034\061\035\037\001"
			+ "\002\000\064\002\uffc1\003\uffc1\005\uffc1\006\uffc1\011\uffc1"
			+ "\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020"
			+ "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1"
			+ "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035"
			+ "\uffc1\001\002\000\004\006\076\001\002\000\004\004\223"
			+ "\001\002\000\004\006\201\001\002\000\030\005\062\006"
			+ "\036\016\034\017\057\020\050\022\042\031\041\032\053"
			+ "\033\035\034\061\035\037\001\002\000\004\006\171\001"
			+ "\002\000\064\002\uffc2\003\uffc2\005\uffc2\006\uffc2\011\uffc2"
			+ "\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020"
			+ "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2"
			+ "\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035"
			+ "\uffc2\001\002\000\014\005\062\006\036\016\034\017\057"
			+ "\020\050\001\002\000\026\005\062\006\036\016\034\017"
			+ "\057\020\050\031\041\032\053\033\035\034\061\035\037"
			+ "\001\002\000\012\014\155\023\157\024\154\025\156\001"
			+ "\002\000\064\002\uffc5\003\uffc5\005\uffc5\006\uffc5\011\uffc5"
			+ "\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020"
			+ "\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5"
			+ "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035"
			+ "\uffc5\001\002\000\014\002\uffd5\003\uffd5\011\uffd5\013\uffd5"
			+ "\015\uffd5\001\002\000\012\002\uffdc\003\151\013\153\015"
			+ "\147\001\002\000\064\002\uffb4\003\uffb4\005\uffb4\006\uffb4"
			+ "\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017"
			+ "\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4"
			+ "\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034"
			+ "\uffb4\035\uffb4\001\002\000\004\006\136\001\002\000\064"
			+ "\002\uffc3\003\uffc3\005\uffc3\006\uffc3\011\uffc3\012\uffc3\013"
			+ "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3"
			+ "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030"
			+ "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\001\002"
			+ "\000\014\002\uffd4\003\uffd4\011\uffd4\013\uffd4\015\uffd4\001"
			+ "\002\000\004\006\130\001\002\000\064\002\uffb3\003\uffb3"
			+ "\005\uffb3\006\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015"
			+ "\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3"
			+ "\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032"
			+ "\uffb3\033\uffb3\034\uffb3\035\uffb3\001\002\000\032\002\uffd3"
			+ "\003\uffd3\011\uffd3\013\uffd3\014\uffc9\015\uffd3\023\uffc9\024"
			+ "\uffc9\025\uffc9\026\123\027\125\030\124\001\002\000\064"
			+ "\002\uffc0\003\uffc0\005\uffc0\006\uffc0\011\uffc0\012\uffc0\013"
			+ "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0"
			+ "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030"
			+ "\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\001\002"
			+ "\000\004\006\106\001\002\000\004\006\076\001\002\000"
			+ "\004\006\065\001\002\000\004\016\034\001\002\000\064"
			+ "\002\uffc4\003\uffc4\005\uffc4\006\uffc4\011\uffc4\012\uffc4\013"
			+ "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4"
			+ "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030"
			+ "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\001\002"
			+ "\000\004\006\uffa1\001\002\000\004\004\066\001\002\000"
			+ "\006\011\070\015\067\001\002\000\004\004\073\001\002"
			+ "\000\030\005\062\006\036\016\034\017\057\020\050\022"
			+ "\042\031\041\032\053\033\035\034\061\035\037\001\002"
			+ "\000\064\002\uffbb\003\uffbb\005\uffbb\006\uffbb\011\uffbb\012"
			+ "\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb"
			+ "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027"
			+ "\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb"
			+ "\001\002\000\064\002\uffc9\003\uffc9\005\uffc9\006\uffc9\011"
			+ "\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9"
			+ "\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026"
			+ "\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9"
			+ "\035\uffc9\001\002\000\004\011\074\001\002\000\030\005"
			+ "\062\006\036\016\034\017\057\020\050\022\042\031\041"
			+ "\032\053\033\035\034\061\035\037\001\002\000\064\002"
			+ "\uffbc\003\uffbc\005\uffbc\006\uffbc\011\uffbc\012\uffbc\013\uffbc"
			+ "\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022"
			+ "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc"
			+ "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\001\002\000"
			+ "\032\005\062\006\036\011\uffab\016\034\017\057\020\050"
			+ "\022\042\031\041\032\053\033\035\034\061\035\037\001"
			+ "\002\000\064\002\uffb5\003\uffb5\005\uffb5\006\uffb5\011\uffb5"
			+ "\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020"
			+ "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5"
			+ "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035"
			+ "\uffb5\001\002\000\004\011\105\001\002\000\004\015\102"
			+ "\001\002\000\030\005\062\006\036\016\034\017\057\020"
			+ "\050\022\042\031\041\032\053\033\035\034\061\035\037"
			+ "\001\002\000\004\011\uffac\001\002\000\004\011\uffaa\001"
			+ "\002\000\064\002\uffb1\003\uffb1\005\uffb1\006\uffb1\011\uffb1"
			+ "\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020"
			+ "\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1"
			+ "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035"
			+ "\uffb1\001\002\000\004\016\034\001\002\000\004\015\113"
			+ "\001\002\000\014\002\uffa7\011\uffa7\013\uffa7\015\uffa7\016"
			+ "\034\001\002\000\012\002\uffa8\011\uffa8\013\uffa8\015\uffa8"
			+ "\001\002\000\012\002\uffa9\011\uffa9\013\uffa9\015\uffa9\001"
			+ "\002\000\030\005\062\006\036\016\034\017\057\020\050"
			+ "\022\042\031\041\032\053\033\035\034\061\035\037\001"
			+ "\002\000\004\015\115\001\002\000\030\005\062\006\036"
			+ "\016\034\017\057\020\050\022\042\031\041\032\053\033"
			+ "\035\034\061\035\037\001\002\000\032\005\062\006\036"
			+ "\011\117\016\034\017\057\020\050\022\042\031\041\032"
			+ "\053\033\035\034\061\035\037\001\002\000\064\002\uffb0"
			+ "\003\uffb0\005\uffb0\006\uffb0\011\uffb0\012\uffb0\013\uffb0\014"
			+ "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0"
			+ "\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031"
			+ "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\001\002\000\004"
			+ "\011\121\001\002\000\064\002\uffaf\003\uffaf\005\uffaf\006"
			+ "\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf"
			+ "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025"
			+ "\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf"
			+ "\034\uffaf\035\uffaf\001\002\000\026\005\062\006\036\016"
			+ "\034\017\057\020\050\031\041\032\053\033\035\034\061"
			+ "\035\037\001\002\000\026\005\uffd0\006\uffd0\016\uffd0\017"
			+ "\uffd0\020\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0"
			+ "\001\002\000\026\005\uffce\006\uffce\016\uffce\017\uffce\020"
			+ "\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\001\002"
			+ "\000\026\005\uffcf\006\uffcf\016\uffcf\017\uffcf\020\uffcf\031"
			+ "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\001\002\000\014"
			+ "\002\uffd1\003\uffd1\011\uffd1\013\uffd1\015\uffd1\001\002\000"
			+ "\022\002\uffd2\003\uffd2\011\uffd2\013\uffd2\015\uffd2\026\123"
			+ "\027\125\030\124\001\002\000\004\004\131\001\002\000"
			+ "\004\015\132\001\002\000\004\004\133\001\002\000\004"
			+ "\011\134\001\002\000\030\005\062\006\036\016\034\017"
			+ "\057\020\050\022\042\031\041\032\053\033\035\034\061"
			+ "\035\037\001\002\000\064\002\uffbd\003\uffbd\005\uffbd\006"
			+ "\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd"
			+ "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025"
			+ "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd"
			+ "\034\uffbd\035\uffbd\001\002\000\004\016\034\001\002\000"
			+ "\004\015\140\001\002\000\030\005\062\006\036\016\034"
			+ "\017\057\020\050\022\042\031\041\032\053\033\035\034"
			+ "\061\035\037\001\002\000\004\015\142\001\002\000\030"
			+ "\005\062\006\036\016\034\017\057\020\050\022\042\031"
			+ "\041\032\053\033\035\034\061\035\037\001\002\000\032"
			+ "\005\062\006\036\011\144\016\034\017\057\020\050\022"
			+ "\042\031\041\032\053\033\035\034\061\035\037\001\002"
			+ "\000\064\002\uffae\003\uffae\005\uffae\006\uffae\011\uffae\012"
			+ "\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae"
			+ "\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027"
			+ "\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae"
			+ "\001\002\000\004\011\146\001\002\000\064\002\uffad\003"
			+ "\uffad\005\uffad\006\uffad\011\uffad\012\uffad\013\uffad\014\uffad"
			+ "\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023"
			+ "\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad"
			+ "\032\uffad\033\uffad\034\uffad\035\uffad\001\002\000\004\002"
			+ "\uff9e\001\002\000\004\002\uffff\001\002\000\004\002\uff9d"
			+ "\001\002\000\004\002\uffdd\001\002\000\004\002\uff9f\001"
			+ "\002\000\030\005\062\006\036\016\034\017\057\020\050"
			+ "\022\042\031\041\032\053\033\035\034\061\035\037\001"
			+ "\002\000\030\005\062\006\036\016\034\017\057\020\050"
			+ "\022\042\031\041\032\053\033\035\034\061\035\037\001"
			+ "\002\000\030\005\062\006\036\016\034\017\057\020\050"
			+ "\022\042\031\041\032\053\033\035\034\061\035\037\001"
			+ "\002\000\030\005\062\006\036\016\034\017\057\020\050"
			+ "\022\042\031\041\032\053\033\035\034\061\035\037\001"
			+ "\002\000\014\002\uffcb\003\uffcb\011\uffcb\013\uffcb\015\uffcb"
			+ "\001\002\000\014\002\uffcd\003\uffcd\011\uffcd\013\uffcd\015"
			+ "\uffcd\001\002\000\014\002\uffca\003\uffca\011\uffca\013\uffca"
			+ "\015\uffca\001\002\000\014\002\uffcc\003\uffcc\011\uffcc\013"
			+ "\uffcc\015\uffcc\001\002\000\004\021\167\001\002\000\030"
			+ "\005\062\006\036\016\034\017\057\020\050\021\uffc7\031"
			+ "\041\032\053\033\035\034\061\035\037\001\002\000\004"
			+ "\021\uffc6\001\002\000\064\002\uffc8\003\uffc8\005\uffc8\006"
			+ "\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8"
			+ "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025"
			+ "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8"
			+ "\034\uffc8\035\uffc8\001\002\000\064\002\uffbe\003\uffbe\005"
			+ "\uffbe\006\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe"
			+ "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024"
			+ "\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe"
			+ "\033\uffbe\034\uffbe\035\uffbe\001\002\000\004\016\034\001"
			+ "\002\000\004\011\173\001\002\000\004\006\174\001\002"
			+ "\000\030\005\062\006\036\016\034\017\057\020\050\022"
			+ "\042\031\041\032\053\033\035\034\061\035\037\001\002"
			+ "\000\004\011\176\001\002\000\064\002\uffbf\003\uffbf\005"
			+ "\uffbf\006\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf"
			+ "\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024"
			+ "\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf"
			+ "\033\uffbf\034\uffbf\035\uffbf\001\002\000\004\011\200\001"
			+ "\002\000\064\002\uffb2\003\uffb2\005\uffb2\006\uffb2\011\uffb2"
			+ "\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020"
			+ "\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2"
			+ "\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035"
			+ "\uffb2\001\002\000\004\004\213\001\002\000\004\006\203"
			+ "\001\002\000\004\016\034\001\002\000\004\011\205\001"
			+ "\002\000\004\006\206\001\002\000\030\005\062\006\036"
			+ "\016\034\017\057\020\050\022\042\031\041\032\053\033"
			+ "\035\034\061\035\037\001\002\000\004\012\210\001\002"
			+ "\000\030\005\062\006\036\016\034\017\057\020\050\022"
			+ "\042\031\041\032\053\033\035\034\061\035\037\001\002"
			+ "\000\004\011\212\001\002\000\064\002\uffba\003\uffba\005"
			+ "\uffba\006\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba"
			+ "\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024"
			+ "\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba"
			+ "\033\uffba\034\uffba\035\uffba\001\002\000\006\011\215\015"
			+ "\214\001\002\000\004\004\216\001\002\000\004\006\uffb8"
			+ "\001\002\000\006\011\220\015\217\001\002\000\004\004"
			+ "\221\001\002\000\004\006\uffb7\001\002\000\004\011\222"
			+ "\001\002\000\004\006\uffb9\001\002\000\040\002\uffa0\005"
			+ "\uffa0\006\uffa0\011\uffa0\013\uffa0\015\uffa0\016\uffa0\017\uffa0"
			+ "\020\uffa0\022\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035"
			+ "\uffa0\001\002\000\064\002\uffb6\003\uffb6\005\uffb6\006\uffb6"
			+ "\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017"
			+ "\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6"
			+ "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034"
			+ "\uffb6\035\uffb6\001\002\000\012\002\uffdc\003\151\013\153"
			+ "\015\147\001\002\000\004\002\ufffc\001\002\000\004\002"
			+ "\ufff9\001\002\000\004\002\uffdf\001\002\000\004\002\ufff1"
			+ "\001\002\000\012\002\uffdc\003\151\013\153\015\147\001"
			+ "\002\000\004\002\ufffa\001\002\000\006\002\uffeb\013\uffeb"
			+ "\001\002\000\006\002\uffde\013\230\001\002\000\004\002"
			+ "\ufff6\001\002\000\006\002\uffe9\013\uffe9\001\002\000\006"
			+ "\002\uffde\013\230\001\002\000\004\002\ufff0\001\002\000"
			+ "\006\002\uffde\013\230\001\002\000\004\002\001\001\002"
			+ "\000\012\002\uffdc\003\151\013\153\015\147\001\002\000"
			+ "\004\002\ufffd\001\002\000\004\002\uffed\001\002\000\006"
			+ "\002\uffde\013\230\001\002\000\004\002\ufff2\001\002\000"
			+ "\004\002\uffee\001\002\000\004\002\uffef\001\002\000\004"
			+ "\002\000\001\002\000\004\002\ufff4\001\002\000\004\002"
			+ "\ufff3\001\002\000\030\005\062\006\036\016\034\017\057"
			+ "\020\050\022\042\031\041\032\053\033\035\034\061\035"
			+ "\037\001\002\000\004\002\uffec\001\002\000\030\005\062"
			+ "\006\036\016\034\017\057\020\050\022\042\031\041\032"
			+ "\053\033\035\034\061\035\037\001\002\000\006\002\uffde"
			+ "\013\230\001\002\000\004\002\ufffe\001\002\000\004\006"
			+ "\264\001\002\000\004\007\266\001\002\000\010\002\uffda"
			+ "\007\266\013\uffda\001\002\000\012\002\uffa2\006\uffa2\011"
			+ "\uffa2\013\uffa2\001\002\000\012\002\uffa3\006\uffa3\011\uffa3"
			+ "\013\uffa3\001\002\000\006\002\uffde\013\230\001\002\000"
			+ "\006\002\uffdb\013\uffdb\001\002\000\004\002\ufff7\001\002"
			+ "\000\006\006\264\011\uffa4\001\002\000\004\011\276\001"
			+ "\002\000\004\011\uffa5\001\002\000\012\002\uffa6\007\uffa6"
			+ "\011\uffa6\013\uffa6\001\002\000\004\002\ufff8\001\002\000"
			+ "\012\002\uffdc\003\151\013\153\015\147\001\002\000\004"
			+ "\002\ufffb\001\002\000\006\002\uffde\013\230\001\002\000"
			+ "\004\002\ufff5\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\301\000\004\033\013\001\001\000\034\005\032\006"
			+ "\057\010\046\011\053\012\236\013\071\015\043\016\062"
			+ "\017\037\020\031\021\055\027\050\043\301\001\001\000"
			+ "\040\003\051\005\032\006\057\010\046\011\053\012\042"
			+ "\013\054\015\043\016\062\017\037\020\031\021\055\023"
			+ "\277\026\044\027\050\001\001\000\004\034\276\001\001"
			+ "\000\004\005\262\001\001\000\004\005\257\001\001\000"
			+ "\004\005\255\001\001\000\004\034\254\001\001\000\004"
			+ "\034\253\001\001\000\002\001\001\000\004\034\251\001"
			+ "\001\000\004\034\250\001\001\000\010\005\107\007\233"
			+ "\041\246\001\001\000\014\005\032\006\057\010\046\011"
			+ "\053\021\245\001\001\000\040\003\051\005\032\006\057"
			+ "\010\046\011\053\012\042\013\054\015\043\016\062\017"
			+ "\037\020\031\021\055\023\243\026\044\027\050\001\001"
			+ "\000\040\003\051\005\032\006\057\010\046\011\053\012"
			+ "\042\013\054\015\043\016\062\017\037\020\031\021\055"
			+ "\023\241\026\044\027\050\001\001\000\034\005\032\006"
			+ "\057\010\046\011\053\012\236\013\071\015\043\016\062"
			+ "\017\037\020\031\021\055\027\050\043\237\001\001\000"
			+ "\010\005\107\007\233\041\234\001\001\000\040\003\051"
			+ "\005\032\006\057\010\046\011\053\012\042\013\054\015"
			+ "\043\016\062\017\037\020\031\021\055\023\231\026\044"
			+ "\027\050\001\001\000\004\034\230\001\001\000\004\034"
			+ "\226\001\001\000\040\003\051\005\032\006\057\010\046"
			+ "\011\053\012\042\013\054\015\043\016\062\017\037\020"
			+ "\031\021\055\023\224\026\044\027\050\001\001\000\040"
			+ "\003\051\005\032\006\057\010\046\011\053\012\042\013"
			+ "\054\015\043\016\062\017\037\020\031\021\055\023\045"
			+ "\026\044\027\050\001\001\000\002\001\001\000\004\031"
			+ "\223\001\001\000\002\001\001\000\004\024\201\001\001"
			+ "\000\040\003\051\005\032\006\057\010\046\011\053\012"
			+ "\042\013\054\015\043\016\062\017\037\020\031\021\055"
			+ "\023\176\026\044\027\050\001\001\000\002\001\001\000"
			+ "\002\001\001\000\014\005\032\006\057\010\046\011\053"
			+ "\021\167\001\001\000\032\005\032\006\057\010\046\011"
			+ "\053\013\164\014\163\015\043\016\062\017\037\020\031"
			+ "\021\055\027\050\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\006\004\151\042\147\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\004"
			+ "\025\121\001\001\000\002\001\001\000\002\001\001\000"
			+ "\004\031\076\001\001\000\002\001\001\000\004\005\063"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\032\005\032"
			+ "\006\057\010\046\011\053\012\070\013\071\015\043\016"
			+ "\062\017\037\020\031\021\055\027\050\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\032\005"
			+ "\032\006\057\010\046\011\053\012\074\013\071\015\043"
			+ "\016\062\017\037\020\031\021\055\027\050\001\001\000"
			+ "\002\001\001\000\034\005\032\006\057\010\046\011\053"
			+ "\012\100\013\071\015\043\016\062\017\037\020\031\021"
			+ "\055\022\077\027\050\001\001\000\002\001\001\000\002"
			+ "\001\001\000\004\030\102\001\001\000\032\005\032\006"
			+ "\057\010\046\011\053\012\103\013\071\015\043\016\062"
			+ "\017\037\020\031\021\055\027\050\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\006\005\107"
			+ "\007\106\001\001\000\002\001\001\000\010\002\111\005"
			+ "\107\007\110\001\001\000\002\001\001\000\002\001\001"
			+ "\000\032\005\032\006\057\010\046\011\053\012\113\013"
			+ "\071\015\043\016\062\017\037\020\031\021\055\027\050"
			+ "\001\001\000\002\001\001\000\032\005\032\006\057\010"
			+ "\046\011\053\012\115\013\071\015\043\016\062\017\037"
			+ "\020\031\021\055\027\050\001\001\000\032\005\032\006"
			+ "\057\010\046\011\053\012\117\013\071\015\043\016\062"
			+ "\017\037\020\031\021\055\027\050\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\032\005\032"
			+ "\006\057\010\046\011\053\013\126\015\043\016\062\017"
			+ "\037\020\031\021\055\026\125\027\050\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\004\025\121\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\032\005"
			+ "\032\006\057\010\046\011\053\012\134\013\071\015\043"
			+ "\016\062\017\037\020\031\021\055\027\050\001\001\000"
			+ "\002\001\001\000\006\005\107\007\136\001\001\000\002"
			+ "\001\001\000\032\005\032\006\057\010\046\011\053\012"
			+ "\140\013\071\015\043\016\062\017\037\020\031\021\055"
			+ "\027\050\001\001\000\002\001\001\000\032\005\032\006"
			+ "\057\010\046\011\053\012\142\013\071\015\043\016\062"
			+ "\017\037\020\031\021\055\027\050\001\001\000\032\005"
			+ "\032\006\057\010\046\011\053\012\144\013\071\015\043"
			+ "\016\062\017\037\020\031\021\055\027\050\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\032\005\032\006\057\010\046"
			+ "\011\053\012\162\013\071\015\043\016\062\017\037\020"
			+ "\031\021\055\027\050\001\001\000\032\005\032\006\057"
			+ "\010\046\011\053\012\161\013\071\015\043\016\062\017"
			+ "\037\020\031\021\055\027\050\001\001\000\032\005\032"
			+ "\006\057\010\046\011\053\012\160\013\071\015\043\016"
			+ "\062\017\037\020\031\021\055\027\050\001\001\000\032"
			+ "\005\032\006\057\010\046\011\053\012\157\013\071\015"
			+ "\043\016\062\017\037\020\031\021\055\027\050\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\032\005\032\006\057"
			+ "\010\046\011\053\013\164\014\165\015\043\016\062\017"
			+ "\037\020\031\021\055\027\050\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\006\005\107\007"
			+ "\171\001\001\000\002\001\001\000\002\001\001\000\040"
			+ "\003\051\005\032\006\057\010\046\011\053\012\042\013"
			+ "\054\015\043\016\062\017\037\020\031\021\055\023\174"
			+ "\026\044\027\050\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\006\005\107\007\203\001\001\000"
			+ "\002\001\001\000\002\001\001\000\032\005\032\006\057"
			+ "\010\046\011\053\012\206\013\071\015\043\016\062\017"
			+ "\037\020\031\021\055\027\050\001\001\000\002\001\001"
			+ "\000\032\005\032\006\057\010\046\011\053\012\210\013"
			+ "\071\015\043\016\062\017\037\020\031\021\055\027\050"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\006"
			+ "\004\151\042\225\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\006\004\151"
			+ "\042\232\001\001\000\002\001\001\000\002\001\001\000"
			+ "\004\034\235\001\001\000\002\001\001\000\002\001\001"
			+ "\000\004\034\240\001\001\000\002\001\001\000\004\034"
			+ "\242\001\001\000\002\001\001\000\006\004\151\042\244"
			+ "\001\001\000\002\001\001\000\002\001\001\000\004\034"
			+ "\247\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\032\005\032\006\057\010\046\011\053\012\256"
			+ "\013\071\015\043\016\062\017\037\020\031\021\055\027"
			+ "\050\001\001\000\002\001\001\000\032\005\032\006\057"
			+ "\010\046\011\053\012\260\013\071\015\043\016\062\017"
			+ "\037\020\031\021\055\027\050\001\001\000\004\034\261"
			+ "\001\001\000\002\001\001\000\004\037\264\001\001\000"
			+ "\006\035\272\045\266\001\001\000\010\035\270\040\267"
			+ "\045\266\001\001\000\002\001\001\000\002\001\001\000"
			+ "\004\034\271\001\001\000\002\001\001\000\002\001\001"
			+ "\000\006\036\273\037\274\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\006"
			+ "\004\151\042\300\001\001\000\002\001\001\000\004\034"
			+ "\302\001\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$parser$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$parser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num,
			java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
			throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 1;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$parser$actions {
	private final parser parser;

	/** Constructor */
	CUP$parser$actions(parser parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$parser$do_action(
			int CUP$parser$act_num,
			java_cup.runtime.lr_parser CUP$parser$parser,
			java.util.Stack CUP$parser$stack, int CUP$parser$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$parser$result;

		/* select the action based on the action number */
		switch (CUP$parser$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 100: // terminalPunctuation ::= error
		{
			String RESULT = null;
			RESULT = "Not a grammatical sneps!\n";
			System.out.println("Not sneps!");
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"terminalPunctuation",
							2,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 99: // terminalPunctuation ::= COMA
		{
			String RESULT = null;
			RESULT = "terminal punctuation in sneps.\n";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"terminalPunctuation",
							2,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 98: // terminalPunctuation ::= DT
		{
			String RESULT = null;
			RESULT = "terminal punctuation in sneps.\n";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"terminalPunctuation",
							2,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 97: // SNePSLOGsymbol ::= WF NM
		{
			String RESULT = null;
			int nleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int nright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Object n = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "wff" + n;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"SNePSLOGsymbol",
							3,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 96: // qvar ::= QM SNePSLOGsymbol
		{
			String RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "query" + s;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"qvar",
							4,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 95: // identifier ::= ID
		{
			String RESULT = null;
			int iileft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int iiright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Object ii = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = ii + "";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"identifier",
							35,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 94: // lispString ::= identifier
		{
			String RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int iright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String i = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = i + "";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"lispString",
							27,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 93: // lispStringH ::=
		{
			String RESULT = null;
			RESULT = "";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"lispStringH",
							28,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 92: // lispStringH ::= lispList
		{
			String RESULT = null;
			int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int rright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String r = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = r;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"lispStringH",
							28,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 91: // lispList ::= LP lispString lispStringH RP
		{
			String RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			String l = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int l1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int l1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String l1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = l + " " + l1;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"lispList",
							29,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 3)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 90: // condH ::=
		{
			String RESULT = null;
			RESULT = "";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"condH",
							0,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 89: // condH ::= symbolSequence
		{
			String RESULT = null;
			int s1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int s1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String s1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = s1;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"condH",
							0,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 88: // symbolSequence ::= SNePSLOGsymbol condH
		{
			String RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String c = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = s + " " + c;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"symbolSequence",
							5,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 87: // termSetH ::= COMA termSet
		{
			String RESULT = null;
			int tsleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int tsright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String ts = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = " and " + ts;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"termSetH",
							22,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 86: // termSetSequence ::=
		{
			String RESULT = null;
			RESULT = "";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"termSetSequence",
							16,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 85: // termSetSequence ::= termSet termSetH
		{
			String RESULT = null;
			int t1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int t1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String t1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int t2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int t2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String t2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = t1 + t2;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"termSetSequence",
							16,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 84: // withAllTerm ::= WITHALL LP symbolSequence COMA termSet COMA
					// termSet termSet RP
		{
			String RESULT = null;
			int s1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).left;
			int s1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).right;
			String s1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).value;
			int t3left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int t3right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			String t3 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int t4left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int t4right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			String t4 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int t5left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int t5right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String t5 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = "withAllTerm " + s1 + "-" + t3 + "-" + t4 + "-" + t5;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"withAllTerm",
							7,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 8)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 83: // withAllTerm ::= WITHALL LP symbolSequence COMA termSet COMA
					// termSet RP
		{
			String RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int t1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int t1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			String t1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int t2left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int t2right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String t2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = "withAllTerm " + s + "-" + t1 + "-" + t2;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"withAllTerm",
							7,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 7)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 82: // withSomeTerm ::= WITHSOME LP symbolSequence COMA termSet
					// COMA termSet termSet RP
		{
			String RESULT = null;
			int s1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).left;
			int s1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).right;
			String s1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).value;
			int t3left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int t3right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			String t3 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int t4left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int t4right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			String t4 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int t5left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int t5right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String t5 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = "withSomeTerm " + s1 + "-" + t3 + "-" + t4 + "-" + t5;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"withSomeTerm",
							6,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 8)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 81: // withSomeTerm ::= WITHSOME LP symbolSequence COMA termSet
					// COMA termSet RP
		{
			String RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int t1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int t1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			String t1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int t2left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int t2right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String t2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = "withSomeTerm " + s + "-" + t1 + "-" + t2;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"withSomeTerm",
							6,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 7)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 80: // atomicTermH ::= LP termSetSequence RP
		{
			String RESULT = null;
			int t2left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int t2right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String t2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = "(" + t2 + ")";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"atomicTermH",
							23,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 79: // atomicTerm ::= LP wff RP
		{
			String RESULT = null;
			int wleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int wright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String w = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = "(" + w + ")";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"atomicTerm",
							15,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 78: // atomicTerm ::= withAllTerm
		{
			String RESULT = null;
			int waleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int waright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String wa = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = wa;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"atomicTerm",
							15,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 77: // atomicTerm ::= withSomeTerm
		{
			String RESULT = null;
			int wsleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int wsright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String ws = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = ws;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"atomicTerm",
							15,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 76: // atomicTerm ::= qvar atomicTermH
		{
			String RESULT = null;
			int qleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int qright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String q = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int qhleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int qhright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String qh = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = q + qh;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"atomicTerm",
							15,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 75: // atomicTerm ::= SNePSLOGsymbol atomicTermH
		{
			String RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int atleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int atright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String at = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = s + at;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"atomicTerm",
							15,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 74: // nexistsParamters ::= LP NM COMA NM RP
		{
			String RESULT = null;
			int i1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int i1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Object i1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int k1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int k1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Object k1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = "(" + i1 + "," + k1 + ")";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"nexistsParamters",
							18,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 4)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 73: // nexistsParamters ::= LP NM RP
		{
			String RESULT = null;
			int j1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int j1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Object j1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = "(" + j1 + ")";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"nexistsParamters",
							18,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 72: // nexistsParamters ::= LP NM COMA NM COMA NM RP
		{
			String RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			Object i = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int jleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int jright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Object j = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int kleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int kright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Object k = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = "(" + i + "," + j + "," + k + ")";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"nexistsParamters",
							18,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 6)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 71: // nexistsTerm ::= NEXISTS nexistsParamters LP symbolSequence
					// RP LP termSet CL termSet RP
		{
			String RESULT = null;
			int npleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 8)).left;
			int npright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 8)).right;
			String np = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 8)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).right;
			String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).value;
			int t1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int t1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			String t1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int t2left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int t2right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String t2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = "";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"nexistsTerm",
							13,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 9)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 70: // threshTerm ::= THRESH LP NM RP termSet
		{
			String RESULT = null;
			int i1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int i1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Object i1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int t1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int t1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String t1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			Integer x = Integer.parseInt(i1 + "");
			if (x >= 0) {
				RESULT = "threshTerm Right";
			} else {
				RESULT = "wrong thresTerm";
			}
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"threshTerm",
							14,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 4)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 69: // threshTerm ::= THRESH LP NM COMA NM RP termSet
		{
			String RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			Object i = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int jleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int jright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Object j = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int tright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String t = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			Integer x = Integer.parseInt(i + "");
			Integer y = Integer.parseInt(j + "");
			if (x >= 0 && y >= x) {
				RESULT = "threshTerm Right";
			} else {
				RESULT = "wrong threshTerm";
			}
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"threshTerm",
							14,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 6)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 68: // andorTerm ::= ANDOR LP NM COMA NM RP termSet
		{
			String RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			Object i = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int jleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int jright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Object j = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int tright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String t = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			Integer x = Integer.parseInt(i + "");
			Integer y = Integer.parseInt(j + "");
			if (x >= 0 && y >= x) {
				RESULT = "andorTerm Right";
			} else {
				RESULT = "wrong andor term";
			}
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"andorTerm",
							12,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 6)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 67: // negatedTerm ::= NOT atomicTerm
		{
			String RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "not " + a;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"negatedTerm",
							11,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 66: // allTerm ::= ALL LP symbolSequence RP LP wff RP
		{
			String RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int wleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int wright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String w = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = s + " " + w;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"allTerm",
							21,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 6)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 65: // prefixedTerm ::= atomicTerm
		{
			String RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int iright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String i = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "forAll term: " + i;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"prefixedTerm",
							9,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 64: // prefixedTerm ::= threshTerm
		{
			String RESULT = null;
			int hleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int hright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String h = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "forAll term: " + h;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"prefixedTerm",
							9,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 63: // prefixedTerm ::= nexistsTerm
		{
			String RESULT = null;
			int xleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int xright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String x = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "nExist term: " + x;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"prefixedTerm",
							9,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 62: // prefixedTerm ::= allTerm
		{
			String RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int lright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String l = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "forAll term: " + l;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"prefixedTerm",
							9,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 61: // prefixedTerm ::= andorTerm
		{
			String RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "andor term: " + a;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"prefixedTerm",
							9,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 60: // prefixedTerm ::= negatedTerm
		{
			String RESULT = null;
			int nleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int nright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String n = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "negated term: " + n;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"prefixedTerm",
							9,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 59: // termSequence ::= prefixedTerm termSequence
		{
			String RESULT = null;
			int p1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int p1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String p1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "prefixed term " + p1 + " and prefixed term " + s;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"termSequence",
							10,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 58: // termSequence ::= prefixedTerm
		{
			String RESULT = null;
			int pleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int pright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String p = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "prefixed term:" + p;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"termSequence",
							10,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 57: // termSet ::= RCURLY termSequence LCURLY
		{
			String RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String t = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = "{" + t + "}";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"termSet",
							8,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 56: // termSet ::= prefixedTerm
		{
			String RESULT = null;
			int pleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int pright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String p = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "termSet" + p;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"termSet",
							8,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 55: // entailment ::= termSet II termSet
		{
			String RESULT = null;
			int t7left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int t7right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			String t7 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int t8left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int t8right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String t8 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = t7 + " numerical entail " + t8;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"entailment",
							1,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 54: // entailment ::= termSet ANDENTAIL termSet
		{
			String RESULT = null;
			int t5left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int t5right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			String t5 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int t6left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int t6right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String t6 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = t5 + " ANDENTAIL " + t6;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"entailment",
							1,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 53: // entailment ::= termSet ORENTAIL termSet
		{
			String RESULT = null;
			int t3left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int t3right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			String t3 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int t4left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int t4right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String t4 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = t3 + " ORENTAIL " + t4;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"entailment",
							1,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 52: // entailment ::= termSet ARROW termSet
		{
			String RESULT = null;
			int t1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int t1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			String t1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int t2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int t2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String t2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = t1 + "ARROW " + t2;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"entailment",
							1,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 51: // helpersConnectives ::= DOUBLEIMPLICATION
		{
			String RESULT = null;
			RESULT = "<=>";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"helpersConnectives",
							19,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 50: // helpersConnectives ::= OR
		{
			String RESULT = null;
			RESULT = "or";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"helpersConnectives",
							19,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 49: // helpersConnectives ::= AND
		{
			String RESULT = null;
			RESULT = "and";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"helpersConnectives",
							19,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 48: // infixedTerm ::= prefixedTerm helpersConnectives infixedTerm
		{
			String RESULT = null;
			int p3left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int p3right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			String p3 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int h2left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int h2right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String h2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int i2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int i2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String i2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = p3 + " " + h2 + " " + i2;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"infixedTerm",
							20,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 47: // infixedTerm ::= prefixedTerm helpersConnectives prefixedTerm
		{
			String RESULT = null;
			int p1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int p1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			String p1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int h1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int h1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String h1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int p2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int p2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String p2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = p1 + " " + h1 + " " + p2;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"infixedTerm",
							20,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 46: // wff ::= prefixedTerm
		{
			String RESULT = null;
			int pleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int pright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String p = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = p;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"wff",
							17,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 45: // wff ::= entailment
		{
			String RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = e;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"wff",
							17,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 44: // wff ::= infixedTerm
		{
			String RESULT = null;
			int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String e1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = e1;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"wff",
							17,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 43: // SNePSLOGfunction ::= INFERENCE
		{
			String RESULT = null;
			RESULT = "inference";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"SNePSLOGfunction",
							24,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 42: // SNePSLOGfunction ::= TRANSLATION
		{
			String RESULT = null;
			RESULT = "translation";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"SNePSLOGfunction",
							24,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 41: // SNePSLOGfunction ::= ACTING
		{
			String RESULT = null;
			RESULT = "acting";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"SNePSLOGfunction",
							24,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 40: // SNePSLOGfunction ::= PARSING
		{
			String RESULT = null;
			RESULT = "parsing";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"SNePSLOGfunction",
							24,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 39: // defineH ::=
		{
			String RESULT = null;
			RESULT = "";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"defineH",
							30,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 38: // defineH ::= lispString
		{
			String RESULT = null;
			int ssleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int ssright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String ss = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = ss;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"defineH",
							30,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 37: // activateHK ::=
		{
			String RESULT = null;
			RESULT = "";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"activateHK",
							32,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 36: // activateHK ::= terminalPunctuation
		{
			String RESULT = null;
			int tpleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int tpright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String tp = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = tp;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"activateHK",
							32,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 35: // activateH ::=
		{
			String RESULT = null;
			RESULT = "";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"activateH",
							26,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 34: // activateH ::= DT
		{
			String RESULT = null;
			RESULT = ".";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"activateH",
							26,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 33: // unipathHelper ::=
		{
			String RESULT = null;
			RESULT = "";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"unipathHelper",
							37,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 32: // unipathHelper ::= DT
		{
			String RESULT = null;
			RESULT = ".";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"unipathHelper",
							37,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 31: // unipathType ::=
		{
			String RESULT = null;
			RESULT = "";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"unipathType",
							38,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 30: // unipathType ::= DASH
		{
			String RESULT = null;
			RESULT = "-";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"unipathType",
							38,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 29: // unipath ::= identifier unipathType unipathHelper
		{
			String RESULT = null;
			int relationleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int relationright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			String relation = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String t = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int hleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int hright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String h = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = relation + " " + t + " " + h;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"unipath",
							36,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 28: // path ::= LP CONVERSE path RP
		{
			String RESULT = null;
			int pleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int pright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String p = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = "converse:" + p;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"path",
							39,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 3)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 27: // path ::= unipath
		{
			String RESULT = null;
			int upleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int upright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String up = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "unipath:" + up;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"path",
							39,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 26: // defineRelation ::= identifier identifier NM ADJUST
		{
			String RESULT = null;
			int nameleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int nameright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			String name = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int typeleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			String type = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int limitleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int limitright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Object limit = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int adleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int adright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Object ad = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "defineRelation:" + name + " " + type + " " + limit + " "
					+ ad;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"defineRelation",
							34,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 3)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 25: // describeTermH ::=
		{
			String RESULT = null;
			RESULT = "";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"describeTermH",
							33,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 24: // describeTermH ::= termSet
		{
			String RESULT = null;
			int ttleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int ttright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String tt = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = tt + "";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"describeTermH",
							33,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 23: // describeContextH ::=
		{
			String RESULT = null;
			RESULT = "";
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"describeContextH",
							31,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 22: // describeContextH ::= symbolSequence
		{
			String RESULT = null;
			int sssleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int sssright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String sss = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = sss;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"describeContextH",
							31,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 21: // snepslogCommand ::= REMOVEFROMCONTEXT SNePSLOGsymbol termSet
		{
			String RESULT = null;
			int symleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int symright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String sym = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int termmleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int termmright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String termm = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "remove from the context " + sym + " " + termm;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 20: // snepslogCommand ::= PERFORM atomicTerm
		{
			String RESULT = null;
			int atomleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int atomright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String atom = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "perform " + atom;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 19: // snepslogCommand ::= NORMAL activateH
		{
			String RESULT = null;
			int a15left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int a15right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String a15 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "normal" + a15;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 18: // snepslogCommand ::= LISTWFFS activateH
		{
			String RESULT = null;
			int a14left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int a14right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String a14 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "list wffs" + a14;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 17: // snepslogCommand ::= LISTTERMS describeTermH activateH
		{
			String RESULT = null;
			int dtermleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int dtermright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String dterm = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int aacleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int aacright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String aac = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = dterm + aac;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 16: // snepslogCommand ::= LISTCONTEXTS activateH
		{
			String RESULT = null;
			int a13left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int a13right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String a13 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "list contexts" + a13;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 15: // snepslogCommand ::= LISTASSERTEDWFFS describeContextH
					// activateH
		{
			String RESULT = null;
			int dcleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int dcright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String dc = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int ahleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int ahright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String ah = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = dc + ah;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // snepslogCommand ::= LISP activateH
		{
			String RESULT = null;
			int a12left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int a12right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String a12 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "lisp" + a12;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // snepslogCommand ::= EXPERT activateH
		{
			String RESULT = null;
			int a11left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int a11right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String a11 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "expert" + a11;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // snepslogCommand ::= DESCRIBETERMS describeTermH activateH
		{
			String RESULT = null;
			int d2left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int d2right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String d2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int aaleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int aaright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String aa = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = d2 + aa;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // snepslogCommand ::= DESCRIBECONTEXT describeContextH
					// activateH
		{
			String RESULT = null;
			int ddleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int ddright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String dd = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int acleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int acright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String ac = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = dd + ac;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // snepslogCommand ::= DEFINEFRAME SNePSLOGsymbol lispList
					// defineH activateH
		{
			String RESULT = null;
			int s1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int s1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			String s1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			String l = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int dleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int dright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String d = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int a10left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int a10right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String a10 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "defineFrame" + a10;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 4)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // snepslogCommand ::= CLEARKB activateH
		{
			String RESULT = null;
			int a9left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int a9right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String a9 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "clearKB" + a9;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // snepslogCommand ::= CLEARINFER activateH
		{
			String RESULT = null;
			int a8left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int a8right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String a8 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "clearInfere" + a8;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // snepslogCommand ::= ASKWHNOT wff activateHK
		{
			String RESULT = null;
			int w5left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int w5right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String w5 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int a7left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int a7right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String a7 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "askifnot:" + w5 + a7;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // snepslogCommand ::= ASKWH wff activateHK
		{
			String RESULT = null;
			int w4left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int w4right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String w4 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int a6left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int a6right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String a6 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "askifnot:" + w4 + a6;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // snepslogCommand ::= ASKIFNOT wff activateHK
		{
			String RESULT = null;
			int w3left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int w3right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String w3 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int a5left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int a5right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String a5 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "askifnot:" + w3 + a5;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // snepslogCommand ::= ASK wff activateHK
		{
			String RESULT = null;
			int w2left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int w2right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String w2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int a4left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int a4right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String a4 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "ask:" + w2 + a4;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // snepslogCommand ::= ADDTOCONTEXT SNePSLOGsymbol termSet
				// activateH
		{
			String RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String t = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int a3left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int a3right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String a3 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "addContext " + s + t + a3;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 3)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // snepslogCommand ::= ACTIVATEASSERT wff activateHK
		{
			String RESULT = null;
			int w1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int w1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String w1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int a2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int a2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String a2 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = "believe in: " + w1 + a2;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // $START ::= snepslogCommand EOF
		{
			Object RESULT = null;
			int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String start_val = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = start_val;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"$START",
							0,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			/* ACCEPT */
			CUP$parser$parser.done_parsing();
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // snepslogCommand ::= ACTIVATE wff activateH
		{
			String RESULT = null;
			int wleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int wright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String w = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int a1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int a1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			String a1 = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;
			RESULT = w + a1;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"snepslogCommand",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . */
		default:
			throw new Exception(
					"Invalid action number found in internal parse table");

		}
	}
}
